Command for connect DB
Scaffold-DbContext "server=DESKTOP-HI1APHJ\SQLEXPRESS; database=Employees; trusted_connection=true; TrustServerCertificate=true;" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models

steps
-we add connection string in appsetting.json-
-we configure this string program.cs by using builder.service.AddDbContext
-we crete seprate class for set DbSet and in that we pass model name, this model will map to Db schema. EF is work as ORM tool where object is map

requied some package to connect Db - Microsoft.EntityFrameworkCore.SqlServer/tool/design

---------------------------------------------Program.cs---------------------------------------------

builder.Services.AddDbContext<DataContext>(option =>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

---------------------------------------------appSettings.json---------------------------------------------

"ConnectionStrings": {
  "DefaultConnection": "server=DESKTOP-HI1APHJ\\SQLEXPRESS; database=pokemonreview; trusted_connection=true; TrustServerCertificate=true;"
},

----------------------------------------------MyDbContext------------------------------------------------

 public class DataContext : DbContext/AbpDbContext
 {
     public DataContext (DbContextOptions<DataContext> option):base(option) { }  

     public DbSet<Category> Categories {  get; set; }   
     public DbSet<Country> Country { get; set; }
     public DbSet<Owner> Owner { get; set; } 
 }
------------------------------------------- --------------------------------------------------------------------------------------


# We use Microsoft.EntityFrameworkCore.SqlServer for several reasons:

SQL Server Compatibility: It allows Entity Framework Core (EF Core) to communicate effectively with Microsoft SQL Server databases, utilizing SQL Server's features and optimizations.

ORM Capabilities: EF Core is an Object-Relational Mapper (ORM) that simplifies data access by allowing developers to work with data in terms of .NET objects, rather than SQL queries.

LINQ Support: It enables the use of Language Integrated Query (LINQ) to perform queries against the database in a strongly typed way, making code more readable and maintainable.

Migration Support: EF Core supports database migrations, allowing you to evolve your database schema over time as your application changes.

Change Tracking: It provides automatic change tracking, making it easier to manage updates to entities.
---------------------------------------------------------------------------------------------------------------------------------
# We use Microsoft.EntityFrameworkCore.Tools for several important reasons:

Command-Line Interface: It provides a set of command-line tools that facilitate database management tasks directly from the terminal or Package Manager Console, such as creating, updating, and managing migrations.

Migration Management: It simplifies the process of adding, removing, and applying migrations, allowing developers to keep their database schema in sync with the applicationâ€™s data model.
---------------------------------------------------------------------------------------------------------------------------------
# We use Microsoft.EntityFrameworkCore.design for several important reasons:
Migration Generation: This package enables the creation of migrations from your entity model, allowing you to update your database schema easily as your data model evolves.