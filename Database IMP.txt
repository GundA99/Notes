#Store Procedure
#Call Store Procedure From Code
#Write SP where join 2 Table and return

It a set of sql statement those can be save as single Unit at Database side

#Why we use Store Procedure
-less Network traffic it will run on DB level
-Code reusability
-secure
-Easy to Maintain (change in DB is better then Change in Code and Deployee);

#Normal Query 
  select b.firstName, b.MiddleName, a.JobTitle, a.BirthDate from [HR].[Employee] a inner join [Person].[Person] b
  on a.Id = b.Id;
  
****************************Store Procedure******************************
 - Create SP 
	create proc sp_GetEmployeeData
	as
	begin
	select b.firstName, b.MiddleName, a.JobTitle, a.BirthDate from [kHR].[Employee] a inner join [Person].[Person] b
	on a.Id = b.Id;
	end
 
 - Execute Sp
	exec [dbo][sp_GetEmployeeData]
  
 - Drop store Procedure
	drop proc [dbo][sp_GetEmployeeData]
---------------------------------------------------------------
# Input output parameter
 - Create SP (Input)
	create proc sp_GetJobTitleData(@JobTitle varchar(100))
	as
	begin
	select b.FirstName, b.MiddleName, b.JobTitle from [Hr].[Employee] a inner join [Person].[Person] b
	on b.Id = a.Id where JobTitle = @JobTitle
	end
 - Execute Sp
    - we can execute SP by GUI also -> RC->Execute SP and pass value
	- exec [dbo].[sp_GetJobTitleData] 'Senior Tool Designer'	
-------------------------------------------------------------------
 - Create SP (Input and Output Parameter)
	create proc sp_GetNationalId(@BusinessEntityId int, @NationalIdnumber int output)
	as
	begin
	select @NationalIdnumber = NationalIdnumber from [HR].[Employee] where BusinessEntityId = @BusinessEntityId 
	end
  
 -Execute SP(Declare Variable and execute)
	declare @NationalIdnumber int
	exec [dto].[sp_GetNationalId] 1, NationalIdnumber output
	select @NationalIdnumber
----------------------------------------------------------------------------------------------------------------------
CREATE TABLE Products(
	ProductID INT Identity PRIMARY KEY,
	ProductName VARCHAR(255) NOT NULL,
	Price money NOT NULL,
	Manufacturer VARCHAR(100),
	DataCreated datetime
	);
	----------------------------------------------	
	Parameterless SP
 -	create procedure dbo.sp_InsertProduct
	as
	begin
	declare @ProductName VARCHAR(255),
			@Proce money,
			@Manufacturer VARCHAR(100),
			@DateCreated datetime
			
	select  @ProductName = 'Laptop',
			@Price = 100,
			@Manufacturer = 'DELL',
			@DateCreated = '2024-01-02'
			
	insert into [dto].[Product]([ProductName],[Price],[Manufacturer],[DateCreated])
	values( @ProductName, @Price, @Manufacturer, @DateCreated )
	end
	
 -  exec dbo.sp_InsertProduct
   -----------------------------------------------
   parameterized SP
   
   create procedure dbo.sp_InsertProduct
	(	@ProductName VARCHAR(255) output,                 <----- Output Parameter
		@Proce money,
		@Manufacturer VARCHAR(100),
		@DateCreated datetime = null                      <----- To make it optional
	)
	as
	begin
	insert into [dto].[Product]([ProductName],[Price],[Manufacturer],[DateCreated])
	values( @ProductName, @Price, @Manufacturer, @DateCreated )
	
	set @ProductId = SCOPE_IDENTITY()                      <---- Current PRIMARY value
	
	select [ProductID],[ProductName][Price][Manufacturer],[DateCreated] from [Products] where ProductID = @ProductId
	end
   
   exec dbo.sp_InsertProduct 'Laptop',100,'DELL','2024-01-01'
   
--------------------------------------------------------------------------------------------------------------------------
-Add If not Exist
-Check If Exist
-Update Price


	create procedure dbo.sp_InsertProduct
	(	@ProductName VARCHAR(255),                 
		@Proce money,
		@Manufacturer VARCHAR(100),
		@DateCreated datetime = null                     
	)
	as
	begin	
	if not exists(select 1 from [Products] where [ProductName]=@ProductName and [Manufacturer] = @Manufacturer)
	begin
	insert into [dto].[Product]([ProductName],[Price],[Manufacturer],[DateCreated])
	values( @ProductName, @Price, @Manufacturer, @DateCreated )
	end
	
	ELSE
	if exists (select 1 from [Products] where [ProductName]=@ProductName and [Manufacturer]=@Manufacturer and [Price] = @Price)
	begin
	print 'Product already exists'
	end
	
	ELSE
	if exists (select 1 from [Products] where [ProductName]=@ProductName and [Manufacturer]=@Manufacturer and [Price] != @Price)
	begin
	update [Products]
	set Price = @Price where [ProductName] = @ProductName and [Manufacturer] = @Manufacturer
	end
	
	declare @ProductId int
	set @ProductId = (select top 1 ProductId from [Products] where [ProductName]=@ProductName and [Manufacturer]=@Manufacturer [Price] = @Price)	
	select [ProductID],[ProductName],[Price],[Manufacturer],[DateCreated] from [Products] where ProductId = @ProductID
	end
-------------------------------------------------Debug store Procedure------------------------------------------
- Debuging is Done by IDE
		View -> SQL server Object Explorer-> Add SQL server -> Provide SQL server instance name -> Connect		
		select DB -> store Procedure -> SP -> Rigth click -> Debug Procedure 
				
----------------------------------------------------Book Managment----------------------------------------------------------
https://youtu.be/heXYdyXZV-Q?si=y18T5EwvANoM-dBe

----------------------------------------------------E-Commers----------------------------------------------------------------
CREATE TABLE Products(
	ProductID INT PRIMARY KEY,
	ProductName NVARCHAR(100),
	UnitPrice DECIMAL(10,2),
	StockQuantity INT
	);
	
CREATE TABLE OrderHistory(
	OrderID INT identity PRIMARY KEY,
	ProductID INT,
	Quantity INT,
	OrderDate Date,
	CustomerID int,
	TotalPrice DECIMAL(10,2)
	);
	
CREATE TABLE Customers(
	CustomerID INT PRIMARY KEY,
	FirstName NVARCHAR(50),
	LastName NVARCHAR(50),
	Email NVARCHAR(100),
	PhoneNumber NVARCHAR(10),
	Address NVARCHAR(255)
	);
	
INSERT INTO Products(ProductID, ProductName, unitPrice, StockQuantity)
VALUES
		(1,'Laptop',100.00,50),
		(2,'SmartPhone',650.00, 100),
		(3, 'Table', 350.50,75) 

INSERT INTO Custmers (CustomerID,FirstName,LastName,Email,PhoneNumber,Address)
VALUES	
		(1,'John','Doe','john.doe@example.com','123-456-7890','solapur'),
		(2,'Jane','Smith','jane.smith@example.com','111-456-7890','pandharpur'),
		(3,'Alice','Johnson','alica.johnson@example.com','222-456-7890','pune'),
		
select * from Products
select * from OrderHistory
select * from Customers


CREATE PROCEDURE ProcessOrder
@ProductId int,
@Quantity int,
@CustomerID int
as
begin

--Start the transaction
BEGIN TRANSACTION    

DECLARE @CurrentStockQuantity int
DECLARE @NewStockQuantity int

--get the current stock quantity for a product
SELECT @CurrentStockQuantity = StockQuantity FROM Products where ProductID = @ProductID

--Check if there is enough stock quantity available to fulfill the order

IF @Quantity <= @CurrentStockQuantity
BEGIN
--get the new stock quantity after the order
SET @NewStockQuantity = @CurrentStockQuantity - @Quantity

DECLARE @TotalPrice decimal(10,2)
set @TotalPrice = (SELECT UnitPrice *@Quantity from Products where ProductID = @Productid)

UPDATE Products
SET StockQuantity = @NewStockQuantity
WHERE ProductID = @ProductID

INSERT INTO OrderHistory([ProductID],[Quantity],[OrderDate],[CustomerID],[TotalPrice])
VALUE(@ProductId,@Quantity, GETDATE(),@CustomerId,@TotalPrice)

--commit transaction

COMMIT TRANSACTION
END

ELSE
BEGIN
PRINT 'Error: Insufficient StockQuantity to fulfill the Order'

rollback transaction
END
end
 
---------------------------------------------------------------------------------------------------------
avoid to see 1 no affected msg we can add line
SET NOCOUNT ON;

***********************************************Function***************************************************
#User Defined Function
1. Scalar Function : Alway return a single value
				ex. length(), substring()
				
syntext:	
	CREATE FUNCTION FUNCTION_NAME
	(@Parameter1 DATATYPE, 
	@Parameter2 DATATYPE,...)
	RETURNS Return_Datatype
	AS
	BEGIN
	--Function Body--
		RETURN Return_Datatype
	END

2. Table Value Function: TVF always return a Single value
	
syntext:
	CREATE FUNCTION [schema_name].functionName
	([@parameter name] [data_type])
	RETURNS TABLE
	AS
	RETURN
	(
		SELECT column1, column2
		FROM table_name
		WHERE condition
	)
---------------------------------------------------------------
DEMO
  Create Function:	
	CREATE FUNCTION fn_GetFullName(@Id int)
	RETURNS VARCHAR(100)
	AS
	BEGIN
	DECLARE @FullName varchar(100)
	
	SELECT @FullName = first_name +' '+last_name from Email
	where id = @Id
	return @fullName	
	END	
	
 Execute Function:
	SELECT DBO.fn_GetFullName(1)                <--- return single value
	SELECT DBO.fn_GetFullName(1) as FullName from [dbo].[Email]        <--- return complete table with additional column FullName
	
For Complete Row	
	CREATE FUNCTION fucName(@Id INT)
	RETURNS TABLE
	AS
	RETURN (
		SELECT * FROM emp WHERE id = @Id
	);

******************************************************View********************************************************
Create :
	CREATE VIEW vw_Person
	as
	select BusinessEntityId, FirstName, MiddleName, LastName from [Person].Person
	where MiddleName is not null
	
Execute : select * from vw_Employee_Person	


*************************************************Call SP From Code*************************************

 public class Repository : IRepository
 {
     public MyDbContext Context { get; set; }    
     public Repository(MyDbContext myDbContext)
     {
         Context = myDbContext;
     }


     public async Task<List<Party>> GetParties() 
     {
        return await Context.Set<Party>().FromSqlRaw("EXEC test_pro").ToListAsync();
     }
 }
 
  public async Task<List<User>> CallStoreProcedure()
 {
    return await _context.Users.FromSqlRaw("EXEC getUserSP").ToListAsync();
 }
 
---------------------------------------------------------------------------------------------------
await Context.Database.ExecuteSqlAsync("EXEC test_pro");
will execute the stored procedure and return the number of rows affected (for a query like UPDATE, INSERT, etc.).


*******************************************************3*****************************************
1. Create a Stored Procedure that Joins Two Tables

CREATE PROCEDURE GetPartyAndEventDetails
AS
BEGIN
    SELECT p.Id AS PartyId, p.Name AS PartyName, e.Id AS EventId, e.Name AS EventName
    FROM Party p
    INNER JOIN Event e ON p.Id = e.PartyId
END

2. Define a DTO 

public class PartyEventDetailsDto
{
    public int PartyId { get; set; }
    public string PartyName { get; set; }
    public int EventId { get; set; }
    public string EventName { get; set; }
}

3. Call the Stored Procedure from Entity Framework

// Calling the stored procedure and returning the result as a list of PartyEventDetailsDto
public async Task<List<PartyEventDetailsDto>> GetPartyAndEventDetails()
{
	// Execute the stored procedure and map the result to PartyEventDetailsDto
	var result = await _context.Set<PartyEventDetailsDto>()
		.FromSqlRaw("EXEC GetPartyAndEventDetails") // Execute the stored procedure
		.ToListAsync(); // Convert the result to a list

	return result;
}		
******************************************************************************************************
----------------------------Create Table --------------------------
Create Table emp(
EMPNO int NOT NULL primary key,
ENAME varchar(10) ,
JOB varchar(10),
MGR int ,
HIREDATE date,
SAL decimal(7,2),
COMM decimal(7,2),
DEPTNO int,
);
-----------------------------insert----------------------------------
INSERT INTO emp VALUES 
(7369,'SMITH','CLERK',7902,'1980-12-17',800.00,NULL,20),
(7499,'ALLEN','SALESMAN',7698,'1981-02-20',1600.00,300.00,30),
(7521,'WARD','SALESMAN',7698,'1981-02-22',1250.00,500.00,30),
(7566,'JONES','MANAGER',7839,'1981-04-02',2975.00,NULL,20),
(7654,'MARTIN','SALESMAN',7698,'1981-09-28',1250.00,1400.00,30),
(7698,'BLAKE','MANAGER',7839,'1981-05-01',2850.00,NULL,30),
(7782,'CLARK','MANAGER',7839,'1981-06-09',2450.00,NULL,10),
(7788,'SCOTT','ANALYST',7566,'1982-12-09',3000.00,NULL,20),
(7839,'KING','PRESIDENT',NULL,'1981-11-17',5000.00,NULL,10),
(7844,'TURNER','SALESMAN',7698,'1981-09-08',1500.00,0.00,30),
(7876,'ADAMS','CLERK',7788,'1983-01-12',1100.00,NULL,20),
(7900,'JAMES','CLERK',7698,'1981-12-03',950.00,NULL,30),
(7902,'FORD','ANALYST',7566,'1981-12-03',3000.00,NULL,20),
(7934,'MILLER','CLERK',7782,'1982-01-23',1300.00,NULL,10);

CREATE TABLE dept(
DEPTNO int primary key,
DNAME varchar (14),
Loc varchar(13));

INSERT INTO dept VALUES (10,'ACCOUNTING','NEW YORK'),(20,'RESEARCH','DALLAS'),(30,'SALES','CHICAGO'),(40,'OPERATIONS','BOSTON'),(80,'hr','pune');

create table salgrade(
GRADE int,
LOSAL int,
HISAL int);

INSERT INTO salgrade VALUES (1,700,1200),(2,1201,1400),(3,1401,2000),(4,2001,3000),(5,3001,9999),(1,700,1200),(2,1201,1400),(3,1401,2000),(4,2001,3000),(5,3001,9999);
----------------------------------------------------------------------------------------------------
select * from salgrade;

select * from emp where ename like '__o%';

select * from emp where  sal = 1250;

select * from  emp where sal not between 1250 and 2850;

select * from emp where comm is null;

select * from emp where deptno in (10,30) order by ename desc;

select ename, CONCAT(SUBSTRING(ENAME,2,4), SUBSTRING(job,2,4)) from emp; 

select floor(datediff(getdate, '1999-05-21')/365) age;

create procedure GetEmpData
as 
begin
	declare @dept int;
	set @dept=20;
	select * from emp where DEPTNO = @dept;

end;

exec GetEmpData;

create procedure GetdataWithPar(@dept int)
as 
begin
	select *from emp where DEPTNO = @dept;
end;

declare @d int = 10;
exec GetdataWithPar @d;
#######################################################################
#Print customerName and Quntity from cutomer, order and orderDetails table

SELECT c.CustomerName, SUM(od.Quantity) AS Quantity
FROM Customers c
INNER JOIN Orders o ON c.CustId = o.CustId
INNER JOIN OrderDetails od ON od.OrderId = o.OrderId
GROUP BY c.CustomerName
ORDER BY Quantity DESC;			--always us alias name for sort


A. Simple SQL Queries

# Write a query to list all employees with their department names order by deptNo desc.
->	select e.ename, e.DEPTNO as dept, d.DNAME from emp e inner join dept d ON e.DEPTNO = d.DEPTNO
	order by e.DEPTNO desc;


#Find the names of employees who earn more than $50,000.
->	select ename, sal from emp where SAL>500;

#List all employees who joined after 1981.
->	SELECT [EMPNO]
      ,[ENAME]
      ,[JOB]
      ,[MGR]
      ,[HIREDATE]
      ,[SAL]
      ,[COMM]
      ,[DEPTNO]
  FROM [iacsd0923].[dbo].[emp] where HIREDATE > '1981-01-01';

#Show employee details who work in the "RESEARCH" department.
-> select ename, DEPTNO from emp where DEPTNO = (select DEPTNO from dept where DNAME = 'RESEARCH');

#Display the highest-paid employee from each department.
-> select e.ename, e.sal, e.DEPTNO from emp e where SAL = (select max(SAL) from emp where DEPTNO = e.DEPTNO) ;

B. Joins
#List employees with their corresponding salary grade.
->	SELECT e.ENAME,      
		   e.SAL,        
		   s.grade
	  FROM emp e join salgrade s 
	  ON e.SAL between s.LOSAL and s.HISAL
	  order by s.grade

#Show all departments with the number of employees in each.
-> SELECt d.DNAME, count(d.DEPTNO) from dept d inner join emp e on e.DEPTNO=d.DEPTNO group by d.DNAME,d.DEPTNO

List departments that have no employees.
	SELECT 
		d.deptno,
		d.dname
	FROM 
		dept d
	LEFT JOIN 
		emp e ON d.deptno = e.deptno		<---- till here we get all dept and if emp not assig showing ename null. filter this by null.
	where e.ENAME Is null

C. Aggregations
#What is the average salary of employees per department?
-> SELECT deptno, avg(sal) as 'Average salary' 
	FROM emp GROUP BY DEPTNO

#Which department has the highest total salary payout?
-> SELECT Top(1)deptno, sum(sal) as 'Average salary' 
	FROM emp GROUP BY DEPTNO;

#Count the number of employees in each salary grade.
-> SELECT s.GRADE, count(*) as 'No of employee' FROM emp e join salgrade s on e.SAL between s.LOSAL and s.HISAL group by s.GRADE;

Find the grade with the most employees.
-> SELECT Top(1) s.GRADE, count(*) as 'No of employee' 
	FROM emp e join salgrade s on e.SAL between s.LOSAL and s.HISAL 
	group by s.GRADE
	order by 'No of employee' desc;

D. Subqueries and Advanced
#Find employees whose salary is above the department's average salary.
->	SELECT e.ename, e.sal, e.deptno
	FROM emp e 
	WHERE sal > (
    SELECT AVG(sal) 
    FROM emp c 
    WHERE c.deptno = e.deptno
);

#Retrieve departments where all employees are in grade 4 or higher.
->	SELECT d.deptno, d.dname
	FROM dept d
	JOIN emp e ON d.deptno = e.deptno
	JOIN salgrade s ON e.sal BETWEEN s.losal AND s.hisal
	GROUP BY d.deptno, d.dname
	HAVING MIN(s.grade) >= 1;

#Find employees who are in the highest salary grade.
->  SELECT e.ename, e.sal, s.grade
	FROM emp e
	JOIN salgrade s ON e.sal BETWEEN s.losal AND s.hisal
	WHERE s.grade = (
    SELECT MAX(grade) FROM salgrade
);

#Write a query to list departments with more than 5 employees.
-> SELECT 
    d.deptno,
    d.dname,
    COUNT(e.empno) AS num_employees
	FROM 
		dept d
	JOIN 
		emp e ON d.deptno = e.deptno
	GROUP BY 
		d.deptno, d.dname
	HAVING 
		COUNT(e.empno) > 5;


E. Data Modeling / Theoretical
Why do we separate salary grades into a separate table?

How would you ensure referential integrity between these tables?

If a department is deleted, what should happen to the employees?

How would you handle an employee who doesn't belong to any department?

How would you update an employee’s grade if their salary changes?
--------------------------------------------
Create Table
CREATE TABLE TableName(
	tital varchar(10),
	year varchar(10)
	);
	
IF NOT EXISTS (
    SELECT * FROM INFORMATION_SCHEMA.TABLES 
    WHERE TABLE_NAME = 'TableName' AND TABLE_SCHEMA = 'dbo'
)
BEGIN
    CREATE TABLE TableName (
        tital VARCHAR(10),
        year VARCHAR(10)
    );
END
--------------------------------------------
#Add new column
	ALTER TABLE TableName
	ADD ColumnName DataType;

#Drop a column
	ALTER TABLE Employees
	DROP COLUMN age;
--------------------------------------------
#Update
  UPDATE emp
  SET ENAME = 'AKASH'
  where EMPNO = 7369;
--------------------------------------------
#Alter Table
	ALTER TABLE Employees
	ALTER COLUMN age BIGINT NOT NULL;
--------------------------------------------
#CONCATINATION
SELECT CONCAT(firstName, ' ', lastName) as Name from emp;

--------------------------------------------
#Index
CREATE INDEX idx_Employee_Name_Department
ON Employees (Name, Department);
--------------------------------------------
#View
CREATE VIEW DeptView AS
SELECT ename, sal
FROM empTable
WHERE deptNo = 10;
--------------------------------------------
#TRIGGER
CREATE TRIGGER TriggerName 
{BEFORE/ AFTER} {INSERT/UPDATE/DELETE}
ON TableName FOR EACH ROW
TRIGGERBODY

CREATE TRIGGER trg_Audit_Update
ON Employees
AFTER UPDATE
AS
BEGIN
    INSERT INTO EmployeeAudit (EmployeeID, ChangedDate)
    SELECT EmployeeID, GETDATE()
    FROM inserted;
END;
--------------------------------------------
#PROCEDURE
CREATE PROCEDURE ProcedureName
AS
Begin
	SELECT * FROM EMP;
end;


CREATE PROCEDURE ProcedureName @id INT
AS
BEGIN
    SELECT * FROM EMP WHERE id = @id;
END;
----------------------------------------------
#Find duplicate records in a table
->	SELECT job, count(*) FROM emp
	GROUP BY job 
	HAVING count(*)>2
	
#Find employee without department
->	SELECT e.* FROM emp e
	LEFT JOIN Dept d
	ON e.deptNo = d.DEPTNO 
	WHERE e.DEPTNO is null

#Calculate the total revenue per product
->	SELECT Product_id, sum(quantity * price) as total_revenue
	FROM Sales
	GROUP BY Product_id;

#Customers who made purchases but never returned products.
->	SELECT DISTINCT c.customer_id
	FROM Customer c
	JOIN Order o ON c.customer_id = 
	o.customer_id
	WHERE c.customer_id NOT IN (
	SELECT customer_id FROM Returns
	);

#Show the count of orders per customer.
-> 	SELECT customer_id, COUNT(*) AS order_count
	FROM Orders
	GROUP BY customer_id;

#Retrieve all employees who joined in 2021
->	SELECT *
	FROM emp
	WHERE YEAR(HIREDATE) = 2021;

#Calculate the average order value per customer
->	SELECT customer_id, AVG(total_amount) AS
	avg_order_value 
	FROM Orders 
	GROUP BY customer_id;

#Get the latest order placed by each cutomer.
->  SELECT customer_id, MAX(order_date) AS latest_order_date
	FROM Orders
	GROUP BY customer_id;

#Find products that were never sold
-> 	SELECT p.product_id
	FROM Products p
	LEFT JOIN Sales s
	ON p.product_id = s.product_id
	WHERE s.product_id IS NULL;
	
#Identity the most selling product.
-> 	SELECT TOP (1) product_id, SUM(quantity) AS total_qty
	FROM Sales
	GROUP BY product_id
	ORDER BY total_qty DESC;

#Get the total revenue and the number of order per region
-> 	SELECT region
	SUM(total_amount) AS total_revenue,
	Count(*) AS order_count
	FROM Orders
	GROUP BY region;

#Count how many customers placed more that 5 orders.
->	SELECT COUNT(*) AS customer_count
	FROM(
		SELECT customer_id 
		FROM Orders 
		GROUP BY customer_id
		HAVING COUNT(*)>5
		)
		AS subquery;
	
#Retrieve customers with orders above the average order value.
-> 	SELECT *
	FROM Orders
	WHERE total_amount >
	(SELECT AVG(total_amount) 
		FROM Orders);

#Find all employees hired on weekends.
-> 	SELECT *
	FROM Employees
	WHERE DATENAME(WEEKDAY, hire_date)
	IN('Saturday','Sunday');

#Get monthly sales revenue and order count.
-> 	SELECT FORMAT(date,'yyyy-MM') AS month,
	SUM(amount) AS total_revenue,
	COUNT(order_id) AS order_count
	FROM Orders
	GROUP BY
	FORMAT(date,'yyyy-MM');

#Rank employees by salary within each department.
-> 	SELECT empno, SAL, DEPTNO, Rank() OVER (PARTITION BY DEPTNO ORDER BY sal DESC) AS salary_rk 
	FROM emp;

#Find customers who placed orders every month in 2023
-> 	SELECT Customer_id
	FROM Orders
	WHERE YEAR(order_date)=2023
	GROUP BY customer_id
	HAVING COUNT(DISTINCT FORMAT(order_date, 'yyyy-MM'))=12;

#Identity the first and last order date for each customer.
-> 	SELECT Customer_id, MIN(order_date) AS first_order,
	MAX(order_date) AS last_order
	FROM Orders
	GROUP BY Customer_id;

#Calculate cumulative revenue by day
->	SELECT order_date,
	SUM(total_amount) OVER
	(ORDER BY order_date) AS
	cumulative_revenue
	FROM Orders;

#Identity top-performing departments by average salary.
-> 	SELECT deptNo, AVG(sal) as avg_salary
	FROM  emp
	GROUP BY deptno
	ORDER BY avg_salary DESC;

#Retrieve the maximun salary difference within each department.
->	SELECT deptNo, MAX(SAL) - MIN(SAL) AS salary_diff
	FROM EmployeeAudit
	GROUP BY deptNo 

32-->
