Window application always Run on IIS(Internet information services)
Internet Information Services is an extensible web server software for the Windows server, created by Microsoft to be used with the Windows NT family. It supports HTTPS, HTTP, HTTP/2, FTPS, FTP, NNTP, and SMTP.

IIS Express : lightweight web server Provided by Visual Studio Similar to IIS

IIS Express is a service Provided by visual Studio another services like 
Visual Studio support Apache, TomCat, Wamp,Xamp, MySQL, Java, Php this are services 

-------------------------------------------------------------------------------------------------------------------------------

Docker

Docker is a platform used to develop, ship, and run applications inside containers. 
Containers are a lightweight form of virtualization that allows applications to be packaged with their dependencies and configurations, 
ensuring they run consistently across different environments.

1. Containers
Definition: Containers are a standardized unit of software that encapsulates everything needed to run an application, 
			including code, runtime, libraries, and system tools.
		
Characteristics: Containers are isolated from each other and from the host system, meaning they don't interfere with each other’s operations. 
				They share the same OS kernel but run in their own user space.
					- allow Runnuning multiple apps in isolation
					- are lightweight
					- start quickly
					- are Running instance of Image ( project_image >--RUN--> Container )
					- The Container is a process that run applications with images
					- Container is an isolated process
					
				
2. Images
Definition: An image is a read-only template used to create containers. It contains the application code, libraries, and dependencies needed for the app to run.

Docker Images Made Based on Linux Containers
			
Creation: Images are built from a Dockerfile, which contains instructions on how to assemble the image.
			For example, it specifies the base image (like an OS or a runtime), how to install software, and how to configure the application.
			-Images are Templates of Project
			- it is a kind of ready to use software read-only Template
			- Image is made with source code, libraries, External Dependancies, & tools(CMD)
			- Image Cannot be updated (Can update code changes on imgae)
			- If you want to make changes in image you have to create new image
			
3. Dockerfile
Definition: A Dockerfile is a text file with a series of instructions on how to build a Docker image.

Instructions: Common instructions include FROM (specifying the base image), RUN (executing commands), COPY (copying files), and CMD (specifying the default command to run

4. Docker Engine
Definition: The Docker Engine is the runtime that builds and runs containers. It consists of a server (a long-running daemon process), a REST API for interacting with the server, and a command-line interface (CLI) for managing Docker.

5. Docker Hub
Definition: Docker Hub is a cloud-based registry service where Docker images are stored and shared. 
			It allows you to upload your own images and download images created by others.
			
6. Docker Compose
Definition: Docker Compose is a tool used to define and run multi-container Docker applications. 
			It uses a YAML file (docker-compose.yml) to configure the application’s services, networks, and volumes.

7. Volumes
Definition: Volumes are used to persist data generated by and used by Docker containers. They allow data to be stored outside the container’s filesystem,
			which is helpful for maintaining data between container restarts and for sharing data between containers.
			
How Docker Works:
Build: You write a Dockerfile and use Docker to build an image from it.
Run: You use the Docker CLI or API to run a container from the image.
Manage: Docker provides commands to manage and orchestrate containers, networks, and volumes.

Benefits of Docker:
Portability: Containers can run on any machine that has Docker installed, regardless of the underlying OS.
Consistency: Docker ensures that the application behaves the same in development, testing, and production environments.
Efficiency: Containers are lightweight and have lower overhead compared to traditional virtual machines.

In summary, Docker simplifies the development and deployment process by allowing you to package applications and their dependencies into containers that can run uniformly across various environments.




Docker Images are made based on Linux Container
https://www.youtube.com/watch?v=5D6FxfrP0KA&list=PL8p2I9GklV47v6WZTjHAqdsHxpTIpjRwn&index=11

- Docker is virsion control tool

* Parent Image => Node, mogoDB, Php(Official Images)

* Dockerhub and Docker Desktop are same it provides us ParentImages (Download, pull, manage)

--Steps to Create Docker Image and Run on Docker Desktop--
Rigth Click on Project -> Docker Support (It will Create Docker File)
Rigth Click on Project -> Container Orchestrator Support (It wil Create Docker Compose File) -- Container


-------------Docker File Contains---------------
1. Base Image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base => This line specifies the base image for the final runtime environment of the container. It uses the official .NET 8.0 ASP.NET runtime image.
USER app   => Runs the container as the app user, which is generally a non-privileged user.
WORKDIR /app  => Sets the working directory to /app in the container.
EXPOSE 8080 and EXPOSE 8081   => Indicates that the application will listen on ports 8080 and 8081. These ports are exposed for communication.

2. Build Stage
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build  => Uses the .NET SDK image, which includes the tools needed to build the application. This stage is named build.
ARG BUILD_CONFIGURATION=Release  => Defines a build argument that specifies the build configuration (e.g., Release or Debug). The default is Release.
COPY ["DemoForDocker/DemoForDocker.csproj", "DemoForDocker/"]   => Copies the project file to the container.
RUN dotnet restore "./DemoForDocker/DemoForDocker.csproj"   => Restores the project dependencies.
COPY . .  => Copies the entire source code into the container.
WORKDIR "/src/DemoForDocker"  => Changes the working directory to the project folder.
RUN dotnet build "./DemoForDocker.csproj" -c $BUILD_CONFIGURATION -o /app/build   => Builds the project using the specified configuration and outputs the build artifacts to /app/build.

3. Publish Stage
FROM build AS publish  => Uses the previously defined build stage and names this stage publish.
ARG BUILD_CONFIGURATION=Release   => Reuses the build argument from the previous stage.
RUN dotnet publish "./DemoForDocker.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p=false  =>  Publishes the application to the /app/publish directory. The UseAppHost=false option prevents the creation of a native executable host, which is generally used for cross-platform compatibility.

4. Final Stage

ENTRYPOINT ["dotnet", "DemoForDocker.dll"]   => Defines the command to run when the container starts, which in this case is to execute the .NET application using dotnet.

----------------------------------------------------

other...in Notebook

