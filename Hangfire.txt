https://youtu.be/lsP5ZjcFtMM?si=pfF4l3wR4c8t9z46_
#Hangfire
Hangfire is an open-source framework that allows you to run background jobs in .NET applicationsâ€”without needing a separate Windows service or cron job.
is an open-source and well-documented task scheduler for ASP.NET Core.
its multi-threaded, easily scalable, and offers a variety of job types.

 Steps
 1. Install hangfire package 
	- Hangfire
 
 2. Install System.Data.SqlClient
	to enable hangfire to access the database
	
 3.Update appsetting.json file
	add ConnectionStrings
	"ConnectionStrings":{
	  "sqlCon":"Server=localhost;Database=hangfireApplication;Trusted_Connection=true"
	},
	
 4. Configuer Program.cs file
	
	builder.Services.AddHangfire((sp,config) =>
	{
		var connectionString = sp.GetRequiredService<IConfiguration>().GetConnectionString("sqlCon");
		config.UseSqlServerStorage(connectionString);
	});

	builder.Services.AddHangfireServer();
	
	app.UseHangfireDashboard();               				<---- to enable hangfire Dashboard
	-----------Customize Dashboard------------
	app.useHangfireDashboard("/test/job-dashboard", new DashboardOptions
	{
		DashboardTitle = "Hangfire Job Demo Application",
		DarkMdeEnable = false,
		DisplayStorageConnectionString = false
		Authentication = new[]								<----Hangfire.Dashboard.Basic.Authentication packge required
		{
			new HangfireCustomBasicAuthenticationFilter
			{
				User = "admin",
				Pass = "admin123"
			}
		}
	});
 5. Start the project and visit hangfire dashboard by using path https://localhost:7239/hangfire remove swagger/index.html and add hangfire
	there we can see Servers which are running.

---------------------Create services folder------------------------

1. Fire and Forget job
	This type of jobs server Exicute as soon as can.

public class JobTestController: ControllerBase
{	
	private readonly IJobTestService _jobTestService;
	private readonly IBackgroundJobClien _backgroundJobClient; <--- this service will provides methods to create background jobs with hangfire
	private readonly IRecurringJobManager _recurringJobManager; <--- this service privide helpfull methods for recurring jobs.
	
	public JobTestController(IJobTestService jobTestService, IBackgroundJobClien backgroundJobClient, IRecurringJobManager recurringJobManager)
	{
		_jobTestService = jobTestService;
		_backgroundJobClient = backgroundJobClient;
		_recurringJobManager = recurringJobManager
	}
	[HttpGet("/FireAndForgetjob")]
	public ActionResult CreateFireAndForgetJob()
	{
		backgroundJobClient.Enqueue(()=> _jobTestService.FireAndForgetjob());
		return Ok();
	}
	
	----run and hit api and check on hangfire dashboard 
	
	[HttpGet("/DelayedJob")]
	public ActionResult CreateDelayedJob()
	{
		backgroundJobClient.Schedule(()=> _jobTestService.DelayedJob(), TimeSpan.FromSeconds(60));    	<--- we set to do this job after 60 second so initially we can see this job in Schedule section after 60sec it will move into Succeeded tab. we can forcefully complete this scheduled job also.
		return Ok();
	}
	
	[HttpGet("/ReccuringJob")]
	public ActionResult CreateReccuringJob()
	{
	  _recurringJobManager.AddorUpdate("jobId", ()=> _jobTestService.ReccuringJob(),Cron.Minutely); 	<-- hangfire method will create job for specified Id for update to Existing one
		return Ok();
	}
	
	[HttpGet("/ContinuationJob")]
	public ActionResult CreateReccuringJob()
	{
		var parentJobId = _backgroundJobClient.Enqueue(()=>_jobTestService.FireAndForgetjob());
		_backgroundJobClient.Continuationjobwith(parentJobId, ()=> _jobTestService.ContinuationJob());  <--- It run one by one
		return Ok();
	}
	
}
#########################################################################################################################
Job types 
Fire And Forget job
Delayed jobs (Schedule)
Recurring jobs
Continuation job


builder.Services.AddHangfire((sp,config) =>
{
    var connectionString = sp.GetRequiredService<IConfiguration>().GetConnectionString("sqlCon");
    config.UseSqlServerStorage(connectionString);
});

builder.Services.AddHangfireServer();

app.UseHangfireDashboard();
--------------------------------------------------------------------------------------------------------
#Fire And Forget job 
 [HttpPost("CreatebackgroundJob")]
 public ActionResult CreatebackgroundJob()
 {
     BackgroundJob.Enqueue(() => Console.WriteLine("Background Job Triggerd"));
     return Ok();
 }
 
#Schedule job
 [HttpPost("CreateScheduledJob")]
 public ActionResult CreateScheduledJob()
 {
	var scheduleDateTime = DateTime.UtcNow.AddSeconds(5);
	var dateTimeOffset = new DateTimeOffset(scheduleDateTime);
	BackgroundJob.Schedule(() => Console.WriteLine("Scheduled job triggerd"), dateTimeOffset);
	return Ok();
 }
 
#ContinuationJob
 [HttpPost("CreateContinuationJob")]
 public ActionResult CreateContinuationJob()
 {
     var scheduleDateTime = DateTime.UtcNow.AddSeconds(5);
     var dateTimeOffset = new DateTimeOffset(scheduleDateTime);
     var jobId = BackgroundJob.Schedule(() => Console.WriteLine("Scheduled job 2 triggerd"), dateTimeOffset);
     var job2Id = BackgroundJob.ContinueWith<TestJob>(jobId,x=> x.WriteLog("Continuation Job 1 triggered"));
     var job3Id = BackgroundJob.ContinueWith<TestJob>(jobId, x => x.WriteLog("Continuation Job 2 triggered"));
     var job4Id = BackgroundJob.ContinueWith<TestJob>(jobId, x => x.WriteLog("Continuation Job 3 triggered"));
     return Ok();
 }

#Reccuring Job
 [HttpPost("CreateRecurringJob")]
 public ActionResult CreateRecurringJob()
 {
    RecurringJob.AddOrUpdate<TestJob>("RecurringJob1", x => x.WriteLog("Recurring Job Triggered"), "*/5 * * * * *");
    return Ok();
 }