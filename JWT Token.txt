
A JWT (JSON Web Token) typically consists of three parts separated by dots (.).

# Header: 
This part typically consists of two parts: the type of token (which is JWT) and the signing algorithm being used (such as HMAC SHA256 or RSA). 
For example, a header might look like this:
{
  "alg": "HS256",
  "typ": "JWT"
}
-----------------------------------------------------------
# Payload: 
This part contains the claims. Claims are statements about an entity (typically the user) and additional data.
There are three types of claims: registered, public, and private claims. 
For example:
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true,                ----role
  "Email": "abc"
}

-------------------------Extra Info-----------------------------------
Registered Claims: 
These are predefined claims which are not mandatory but recommended to provide a set of useful, interoperable claims. Some common registered claims include:

iss (issuer): Identifies the principal that issued the JWT.
sub (subject): Identifies the subject of the JWT.
aud (audience): Identifies the recipients that the JWT is intended for.
exp (expiration time): Specifies the expiration time after which the JWT should not be accepted.
nbf (not before): Specifies the time before which the JWT must not be accepted for processing.
iat (issued at): Specifies the time at which the JWT was issued.
jti (JWT ID): Provides a unique identifier for the JWT.
{
  "iss": "issuer",
  "sub": "subject",
  "aud": "audience",
  "exp": 1625939622,
  "nbf": 1625938022,
  "iat": 1625938022,
  "jti": "id123456"
}

-----------------------------------------------
Public Claims:
These are custom claims that are defined by users and application developers. They should be defined in a way that they do not clash with registered claims.
Example:
{
  "name": "John Doe",
  "role": "admin"
}
-----------------------------------------------
Private Claims: 
These are custom claims that are agreed upon between parties that use JWTs. They are neither registered nor public claims. 
Example:
{
  "custom_data": {
    "key1": "value1",
    "key2": "value2"
  }
}


-----------------------------------------------
what is Claims
In the context of authentication and authorization using JWT (JSON Web Token), claims refer to the pieces of information asserted about a subject (typically a user) within the token. 
Claims are statements about the subject that provide information such as identity, roles, permissions, and other attributes relevant to the application's security and functionality.

----------------------------------------------------------------------
# Signature: 
To create the signature part you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.

xxxxxxxxxx.yyyyyyyyyy.zzzzzzzzzz

 xxxxxxxxxx is the base64url encoded header
 yyyyyyyyyy is the base64url encoded payload
 zzzzzzzzzz is the signature





********************************************************Implemtation****************************************************************

JWT
# Download Microsoft.AspNetCore.Authentication.JwtBearer package.
	-Microsoft.AspNetCore.Authentication.JwtBearer: Provides the middleware that integrates JWT token authentication into ASP.NET Core applications, 
													handling the authentication process automatically during the request lifecycle.
# BCrypt.Net-Next -package for encrypt and deceypt password

	            u.Password =  BCrypt.Net.BCrypt.HashPassword(user.Password);          abs->asdfghj
                var pass = BCrypt.Net.BCrypt.Verify(user.Password, u.Password);        it check password compair and return boolean value.


 public string CreateToken(User user)
 {
     List<Claim> claims = new List<Claim>
	 {
		 new Claim(ClaimTypes.Name, user.UserName),
		 new Claim(JwtRegisteredClaimNames.Sub,iconfig["Jwt:Subject"]),
         new Claim(JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()),
	 };

     var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(iconfig["Jwt:Key"]));   //1 
     var signIn = new SigningCredentials(key, SecurityAlgorithms.HmacSha512);          //2 
     var token = new JwtSecurityToken(

         iconfig["Jwt:Issuer"],                 
         iconfig["Jwt:Audience"],
         claims,
         expires: DateTime.UtcNow.AddMinutes(60),
         signingCredentials: signIn
         );                   

// token = {{"alg":"HS512","typ":"JWT"}.{"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name":"akash","sub":"JwtSubject","jti":"50058aea-7287-4695-b268-83397a720482","exp":1726913435,"iss":"JwtIssuer","aud":"JwtAudience"}}		 


     string tokenValue = new JwtSecurityTokenHandler().WriteToken(token);   //3

     return tokenValue;
 }
 
// tokenValue = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9
				.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1lIjoiYWthc2giLCJzdWIiOiJKd3RTdWJqZWN0IiwianRpIjoiNTAwNThhZWEtNzI4Ny00Njk1LWIyNjgtODMzOTdhNzIwNDgyIiwiZXhwIjoxNzI2OTEzNDM1LCJpciLCJhdWQiOiJKd3RBdWRpZW5jZSJ9
				.28gIsVUE2jPlxYshTW55a4_97So3Nwm5CPJYg9mKZczBlVK6yx28GTMmpbeDsl10eBPbHWDP2t8ZRUFcakbj8g"
 
 
 
 
 
1.
SymmetricSecurityKey: which will be used to sign and validate the JWT tokens. Symmetric keys mean the same key is used for both signing (creating the token) and verifying (validating the token).
2.
SigningCredentials: It encapsulates the information needed to sign the token, including the security key and the algorithm used for signing. 
3.
JwtSecurityTokenHandler:
This is a class from the System.IdentityModel.Tokens.Jwt namespace. It provides methods for creating, validating, and handling JWT tokens.
.WriteToken(token): This method takes a JwtSecurityToken object (referred to here as token) and converts it into a string format. This string representation is what you will send to the client as the actual JWT.



# What is the Issuer?
Issuer: The issuer is a claim that indicates who issued the JWT. Itâ€™s often used to help verify the authenticity of the token. When the token is created, the issuer value is included in the claims. When validating the token, you can check if the issuer matches the expected value.

#What is the Audience?
Audience: The audience claim (aud) specifies the intended recipient(s) of the token. It indicates who the token is meant for. This is useful for ensuring that the token is only processed by the intended consumer(s), adding an extra layer of security.
--------------------------------Program.cs-----------------------------------------------------------------


builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateAudience = true,
            ValidateIssuer = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))

        };
    });
	
	
// Add authorization
builder.Services.AddAuthorization();

// Use authentication
app.UseAuthentication();

app.UseAuthorization();


	
-----------------------------------appsetting.json----------------------------------------
  "Jwt": {
    "Key": "asdfghjhgfdsdfghjkjhgfdsghjhgfdsdfghjjhg1234567890sdfdsasdfghjhgfdsdfghjkjhgfdsghjhgfdsdfghjjhg1234567890sdfds",
    "Issuer": "JwtIssuer",                      //who create token
    "Audience": "JwtAudience",					// for whom Crete token
    "Subject": "JwtSubject"
  }	
  -------------------------------------------to enable functionality where we pass token in swagger--------------------------------------------------------------
  
  
  
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Version = "v1" });

    // Add JWT Bearer authentication to Swagger
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        In = ParameterLocation.Header,
        Description = "Please enter a valid token",
        Name = "Authorization",
        Type = SecuritySchemeType.ApiKey,
        Scheme = "bearer",
        BearerFormat="Jwt"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});
