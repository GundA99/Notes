
The ILogger interface is designed to provide a simple logging abstraction for .NET applications, 
allowing developers to log messages from their code in a structured manner. It abstracts away the specific logging implementation, 
which could be based on various logging providers such as Console, Debug, EventSource, or third-party logging frameworks like Serilog or NLog. 



# Key Features and Usage

Logging Levels: ILogger supports different logging levels such as Information, Warning, Error, Debug, etc. 
This helps in categorizing the severity of the logged messages.

Log Message Formatting: It provides methods like LogInformation, LogWarning, LogError, etc., 
which accept a message string and optionally some parameters to be formatted into the message.


--------------------------------------------------------------------------
Syntax

var logger = serviceProvider.GetRequiredService<ILoggerFactory>()
		 	    .CreateLogger("DB Initializer");
    logger.LogInformation(5,"The database is ready!");

Above code result in console -

info: DB Initializer[5]
      The database is ready!



-------------------------------------------------------------------------
Logger Composition: In .NET Core applications, you typically inject ILogger<T> into your classes using dependency injection. 
This strongly-typed logger (ILogger<T>) allows you to easily categorize logs by the type where logging occurs, making it easier to filter and understand logs.

using Microsoft.Extensions.Logging;

public class MyService
{
    private readonly ILogger<MyService> _logger;    <-- Default logger provided by microsoft

    public MyService(ILogger<MyService> logger)
    {
        _logger = logger;
    }

    public void DoWork()
    {
        _logger.LogInformation("Doing some work...");
		_logger.LogWarning("if there are some warnings")
        try
        {
            // Some operation that might throw an exception
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred while doing work.");
        }
    }
}

-------------------------------------------------------------------------
for see logs in json formate in console
add code in program.cs

builder.Logging.AddJsonConsole(options => 
{
	options.JsonWriterOptions = new()
	{
	    Indented = true
	};
});

----------------------------------------------------------------------------------------
There Are multiple logging providers 
1.JSNLog, 
2.Log4Net,
3.NLog


Log4Net
Requred Package - Microsoft.Extensions.Logging.Log4Net.AspNetCore
-----------------------------------------------------------
program.cs
Builder.Logging.AddLog4Net();
-----------------------------------------------------------
Add a log4net.config File with the content
	Rigth Click->add New Item-> select Web Configuration File-> add
	
	<?xml version="1.0" encoding="utf-8"?>
	<log4net>
		<appender name="DebugAppender" type="log4net.Appender.DebugAppender">  
			<layout type="log4net.Layout.PatternLayout>
				<conversionPattern value="%data [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">         <-- If we want to see log in console window then we use this appender
			<layout type="log4net.Layout.PatternLayout>
				<conversionPattern value="%data [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="All">
			<appender-ref ref="DebugAppender" />
			<appender-ref ref="ConsoleAppender" />           <--- Configure appender root
		<root>
	<log4net>	
	
Configure LogLevel in log4Net.config file	
	- Log Levels for Log4Net =>	All, DEBUG,Trace, INFO, WARN,ERROR,FATAL  
-----------------------------------------------------------
add configure Development Level Configuration in appsettings.Development.json
{
	"Logging":
	{
		"LogLevel":{
			"Default": "Trace",
			}
	}		
}
-----------------------------------------------------------
*) when we want to use File Provider add below Configuration

		<appender name="RollingFile" type="log4net.Appender.RollingFileAppender">         <-- If we want to see log in console window then we use this appender
			<file value="{Projectpath}.Logs\log.txt"/>
			<rollingStyle value="Once">      <-- Rolling Style
			------------or--------------
			<rollingStyle value="Size"/>      <-- If rolling Style size
			<maximumFileSize value="1kb"/>    <-- Default size 10mb if not provide size
			<maxSizeRollbackups value="5"/>   <-- it keep that much Backup files 
			
			<layout type="log4net.Layout.PatternLayout>
				<conversionPattern value="%data [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="All">
 			<appender-ref ref="RollingFile" />           <--- Configure appender root
		<root>
		
this will log the logs in the log file
# Rolling style of Log4Net
once = Roll Files once per program execution
size = Roll file based only on the size of the file
Date = Roll file based only on the date
Composite = Roll file based on both the size and date of the file.

- Console and Debug window are default logging windows
builder.logging.AddDebug();  <- if we want only Debug window
builder.logging.AddConsole(); <- if we want only Console window
