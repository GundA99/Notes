#NUnit Testing
NUnit is a popular testing framework for .NET applications that provides a range of features for creating and executing unit tests.
Basically we use NUnit testing for test class library becouse class library cannot run directly bcz it don't have starting point.

step 1 - create NUnit Test Project

its best for Dotnet 8.0+
all the requied Packages will create automatically

step 2 - all new class 
{
	[TestFixture]
	public class MapperTest
	{
		[Test]
		public void MethodName(Parameters)
		{
		
		}
	}
}

step 3 - add Project reference to NUnit Project


# What is NUnit Testing Framework?
- NUnit is a unit-testing framework for all .Net languages. it has support of .Net Core framework.

# Advantage:
it helps to run the test in Parallel, sequence, and orderd

# Attributes: NUnit uses attributes to define tests, setup, teardown, and other aspects of the test lifecycle.
[Test]: Marks a method as a test method.
[SetUp]: Runs before each test method to prepare the test environment.
[TearDown]: Runs after each test method to clean up.
[TestFixture]: Indicates a class that contains tests.
[TestCase]: Allows parameterized tests with multiple inputs.

# Test Runner: NUnit includes test runners that can execute tests and report results. These can be integrated into IDEs like Visual Studio or run from the command line.
# Parallel Testing: NUnit supports running tests in parallel to improve performance.

# Assertions: NUnit provides a variety of assertion methods to verify conditions in tests.

Assert.AreEqual(expected, actual): Asserts that two values are equal.
Assert.IsTrue(condition): Asserts that a condition is true.
Assert.IsFalse(condition): Asserts that a condition is false.
Assert.Throws<T>(action): Asserts that an action throws a specific exception.
