
---------------------------------------------------------------------------------------------------------------------------------

#REST (Representational State Transfer): It mean Transfer of representational state of the resource eg. Employee, order, Fund,student between the client and server.
										 it uses HTTP methods such as get, post, put, delete.
										
#REST API: is Software architecture style which define set of rule created for web services.

#interface: 
- it's a contract, its act like communication between two object. when we are defining i/f we are Defining contract what our inheriting class should do but not how it does.
- Contain only abstract method, Support multiple inheritance, Bydefault i/f methods are public & abstract, By default i/f Variable Public static and final. 

#abstract Class: 
- Contain both abstract or concreate methods, It does not support multiple inheritance, Except Private we can have any access specifier for method and variable, Can Declare Constructor.

#Session:
- Session is a conventional state between client and server where both are aware about each other. 
- A session start when user send request a page for first time, it indicates a period of time during which a user can visite a website.

#Cookies:
- is a small piece of data store on the client side which server use when communication with clients
- this are used to identify a client when sending a subsequent request.  

#lifecycle of states:
- Transient:- an object we have not attached to any session is in transient state. transient entity exiest in heap as normal object. Ex. Employe e = new Employe();
- Persistent:- an object that we have associated with session is in the persist state. ex. Session.save(e);
- Detached:- when we close the session. all obj inside it become detached. ex. session.close().

#OOPs Concepts
There are 4 main Pillers of OOPs
1. Abstraction: Showing Issential things and hiding unnessesory Data is called as abstraction.
	ex. Light switch and Car
2. encapsulates: Is a process of wrapping of Code and Behavior in a single unit is called as encapsulation, encapsulation expose only those part which is safe to expose and remaining part keep secured.
	ex. Bag The Bag contain diff stuffs like pen, pencile, book within it.
3. Inheritance: Inheritance is a process of acquiring the fetures of others. Ex Child class Acquires the fetures of their parent.
				the advantage of Inheritance is code reusability, we can avoid duplicate code by using inheritance.
				ex. we can create a Vehicle base class and car as derived class, the car class inherit properties and method of the vehicle class and also add its own properties and methods. 
4. Polymorphism: -Is a concept by which we can perform single action by different ways. it derived from 2 greek world poly means many and morphism means form.
				 - There are 2 type of polymorphism compile time polymorphism and runtime polymorphism.
				 - we can achive runtime polymorphism through method overriding and complie time polymorphism through method overloading
				 - Ex. Mobile: Sometime our mobile behave as a phone , sometime as a camera and sometime as a radio etc here the same mobile has different form so we can say the mobile object is polymophic in nature.

Method Overloading: a class having two or more method with same name but different argument then we can say that those methods are Overloaded.
					use- when we want the method to perform similar tasks but with different input. then we go with Overloading.
					
Method Overriding: if we have methods with same name and signature in super class and subclass then we say subclass method is overriden by superclass.
	                use- if we want same method with different behaviour in super and sub class then we go with overriding.
#Method Overloading VS Method Overriding
1.Method overloading Occurs with in same class, but Method Overriding ouccurs between 2 class.
2.In method overloading inheritance is not involved, but in Method Overriding inheritace is involved.
3.In method overloading return type is not to be same, but in Method Overriding need to be same.
4. Parameter must be Different, must be same.
5.Static polymorphism can be achive , dyanamical polymophism can be achive.
6. in overloading one method can't hide another, but in overriding sub class method hides superclass method.  


					
#Type of Inheritance
1. single inheritance : it Use when we want to inherit class from one superclass
2. Multilevel inheritance : in that subclass inherit from another subclass.
3. Multiple inheritance : in that subclass is inherit from multiple superclass.
4. Hirarchical inheritance : in that multiple subclass inherit from single superclass.

#Constructor: is a special method used to initialize object, and we use constructor to initialize all variable in the class when object is create.

#Casting 				
->casting means convert one data type to another datatype. 	
1. Upcasting : upcasting is the typecasting of a child object to parent object, it can be Done by implicitly.	
				-whenever we moving from lower datatype to higher datatype you will normaly has implicit casting.
				ex:- int i = 10;
				double d = i; //casting (implicit casting)	
2. DownCasting : it means typecasting of parent object into child object, it done by explicitly. 
				-Moving from higher datatype to lower datatype we have explicit casting 
				ex:- double d= 100.23;
				int y = (int)d;
	 
#Boxing and unboxing
when value type is moved to a reference type it's called as boxing. the vice versa is termed as unboxing.
int i = 10;
object y = i;   // boxing

int z = (int)y;  //unboxing
drowback of Boxing and unboxing is performace reduce due to shift data from heap to stack and stack to heap.

#Association
Association represents a relationship between two classes where object of one class are connected to object of another class.
1.Composition: is a strong form of Association where one class is contain one or more instance of another class.
ex. Class Car{
				private Engine eng;
				private Wheel w;
				public Car(Engine e, Wheel w)
				{
					this.eng = e;
					this.w = w;
				}
			}

2. Aggregation: aggregation is a week form of association where one class has relationship with another class but the part can exist independently of the whole
ex. student and libraries
	class School
	{
			private list<Teacher> Teachers;
			public School()
			{
				
			}
			public void AddTeacher(Teacher t)
			{
				this.Teachers.add(t)
			}
	}
#Exceptions
1. Unchecked Exception: Unchecked Exception are the exception that are not check at Compile-time.(ArrayIndexOutOfBound,IndexOutOfBound)
2. Checked Exception: are exception that are checks at compile-time.(ClassNotFoundException,SqlException)

#Class
a class is a logical Unit or blueprint. it contains fields, methods and properties.

public class Employee
{
	private int experience;			//field :- is a variable of any type
	public Employee()				//Constructor
	{
		//code
	}
	public int Experience			//property (only getter and setter)
	{
		get{rerturn experience;}
		set{experience = value}
	}
	
	public void display()			//method
	{
		
	}
	
}

object:- object is a instance of class.


----------------------------------------------------------------------------------------------------------------
Using Statment:- The using statement ensure that DISPOSE() method of the class object is called even if an exception occurs.
Ex:-
	static void main()
	{
		using(var connection = new SqlConnection("ConnectionString))
		{
			var query = "select * from table";
			var command = new SqlCommand(query, connection);
			connection.open();
			command.ExecuteNonQuery();
			
			//connection.DISPOSE();
		}
	}
	
without Using statement we have to Disconnect the db connection. and during if any error occure before DISPOSE method exception it will create proble.
so if we use Using Statment the it will called dispose method even if exception occure.
----------------------------------------------------------------------------------------------------------------

#Difference betweeen ToBase64String and FromBase64String
Convert.ToBase64String(byte[]): Encodes binary data (byte array) into a Base64 string.
Convert.FromBase64String(string): Decodes a Base64 string back into its original byte array (binary data).

#Synchronization :is used to control access to critical section of code by allowing only one Thread at a time to execute them.

#Why interface can not have The constructor?
- The method inside interface bydefault Abstract, public which means the method implimentation is not provide by i/f itself , it has to be provided by implementing class Therefore no need of Constructor.
- A constructor is used to initialize non-static Data members and as there is no non-static Data member in i/f there is no need.
- if we try to create a constructor inside the i/f the compiler will give a compile-time error('interface' cannot have a constructor).

#Why Abstract Class have a Constructor?
-The main pourpose of the constructor is to initialize the newly create object. in abstract class we have instance variable, abstract menthod, and non abstract method therefore class have constructor.
-if we dont provide constructor compiler will provide defauld constructor in an abstract class.
		public abstract class Animal
		{
			public string Name { get; set; }

			// Constructor in abstract class
			public Animal(string name)
			{
				Name = name;
				Console.WriteLine($"{Name} is being created.");
			}

			// Abstract method (must be implemented by derived classes)
			public abstract void Speak();
		}

		// Derived class
		public class Dog : Animal
		{
			// Constructor in derived class calls base constructor
			public Dog(string name) : base(name)
			{
				// Additional initialization logic for Dog
				Console.WriteLine("Dog is initialized.");
			}

			public override void Speak()
			{
				Console.WriteLine($"{Name} says Woof!");
			}
		}

		public class Program
		{
			public static void Main(string[] args)
			{
				// Creating an instance of Dog, which calls the abstract class constructor
				Dog dog = new Dog("Buddy");
				dog.Speak();  // Output: Buddy says Woof!
			}
		}
#MVC flow:
-request coming from client to the front controller.
-front controller will delegate this request to the handler mapper.
-handler mapper map the request and return the method name and class name to front controller.
-then front controller invoke handler method.
-handler method return the string which is logical view name to front controller.
-then FC call view resolver. view resolver prepare the path of the file by concatinating prefix and suffix.
-view resolver return the full path to the FC in case there is some data, FC set in the view and send the view back to the client.

*********************************************************DOTNET***************************************************************
#C# vs .Net
C# is a microsoft programing language where .Net is a Framwork
C# it has those syntaxes,loops, conditions, swithches, 
.Net framwork has 2 things 
	collection of libraries and It has runtime
		Collection of libraries like list, stack, we can use directly from system.collection class
	.Net framwork has runtime called CLR where we can run application in that we have Garbage collector, CTS,

# Common languge Runtime(CLR) :- The heart of the .NET framwork is CLR, Its runtime environment that execut MSIL code.
								- provide runtime envirnment for our application.
								its responsible for convert code into IL code then jit will convert this IL code into os understandable
								GC: its a part of CLR used for remove unused object.
								CLR is responsible for run GC.
# intermediate languge(IL) :- VB or C# Code you write is compiled into an intermediate languge Called Microsoft Intermediate Languge. The compiled file with IL code is an assembly(.dll or exe file).
	
# Common languge specification(CLS) :- it is resposible for converting the different .net programing languge syntactical rules and regulations into CLR understandable formate.
# Common Type System(CTS) :- Every programming languge has its own data type system so CTS is responsible for understanding all the data type system of .NET programing languge and converting them into CLR understandable formate which will be common formate.
	ex. VB.Net -> integer -> Int32 (CLR data type)
		C#     -> int     -> Int32 (CLR data type)
		
#IL code and Jit workflow of program
Code --------> 		IL(intermediat laguage) ------Jit-----> Machin language
(High level)--->Compiler compile--->

when code compile by compiler it partially converted into IL code when Jit will convert into machin understandable language
JIT(Just in time):- Actually convert IL code into Machin understandable language.

#we can view IL code?
->yes, by using dick assembler we can view

#Diff between .NET Framework and .NET Core 
-Instad, developers prefer to use ASP.net MVC and ASP.NET web Api. Those two technologies have been refactored and combined into a new product that runs on .NET Core, named ASP.NET Core.
- Core Work on Cross-platform (Windows,macOS, Linux). Perfomance is better than .net framwork
- .NET Framework used only on windows.
- Xamarin is only for mobile apps (Android,Ios,macOS).

#Explain Microsoft Intermediate Language
MSIL is the Microsoft Intermediate Language, which provides instructions for calling methods, memory handling, storing and initializing values, exception handling, and so on.
The instructions provided by MSIL are platform-independent and are generated by the language-specific compiler from the source code. JIT compiler compiles the MSIL into machine code based on the requirement.

Why GC important?
Garbage collector is a back ground process which cleans unused Managed resources.

#Managed code vs unmanaged code?
The code that run under the envirnment of CLR is called as managed code.
All code which is compiled and conver into IL code is called as managed code.
the code which does not run under the CLR called as Unmanaged code.

#Value Type and reference Type
Value types contain actual data while reference types contain pointers. and pointer point to the actual data.
value Type are stored on stack while reference types are stored on heap.
value types are your normal data type like int, bool, double and reference types are all objects.

#Array vs ArrayList
array size is fixed and its strongly typed.
where ArrayList is Flexible where we can add any type of data.
i can add integer, string, object.
ArrayList myList = new ArrayList()
myList.add(1);
myList.add("Akash")
Array Performace is better than ArrayList bcz strongly typed 
----------------------------------------------------------------------------------------------------------------
#Generic collection
generic collection is type safed and flexible

List<int> myList = new List<int>();
myList.add(1);
myList.add("akash")  // compiler error
# Delegates:
-The Delegates is a reference type Data type, but instade of referencing object it reference methods.
- A method That is added to the delegate must have same return type and same signature as delegate.
-multicast Delegates: A delegate That points multiple methods is called a multicast delegate.

Func: Func is a generic delegate included in System namespace, in that we can pass 0 to 16 parameter and one out parameter is requird.
Action: Action Delegates can take upto 16 input parameter of different type but it return void type.
Predicate : A predicate must take one input parameter and return boolean 
All this are defined in system namespace. 

#Event
-Even are use Action such as key press, clicks etc.
- 2To declare an event inside a class, first of all you must declare a delegate type the event as
		public delegate string MyDelegate(string s);
	Then, Declare the even using the event keyword 
		event MyDelegate Myevent;
	then, invoke the event by using invoke
		Myevent.invoke("AKASH");
#LINQ:
-LINQ is a Languge Integrated Query it provide the new way to manipulate the data.
- we do not need to learn new query languge syntaxes for different sources of data because it provide the standard query syntax for the various data sources.		
- LINQ return result as object.
-Query = from item in datasource where item.contain(java) select item.

#Marker Interface :	an i/f that does not contain any methods, fields abstract methods, and any constants is called marker i/f, ex. serializable,Clonable 

#Functional Interface : FI is a interface that has only pure one abstract method, Ex. Comparable.

#Reflection: reflection object are used for obtaining type information at runtime.

#Web.config: file contains application-level configuration.

#appsetting.json : is commonly used to manage application configuration settings.,file contains application-level configuration.
				   It provides a single location to store various settings related to your application, such as connection strings, API keys, and feature flags.
#Startup.cs
The Startup.cs file is used to configure the application's services and request pipeline.
 It contains methods like ConfigureServices and Configure 
 
ConfigureServices:- method configure the SERVICES which are required by the application
such as enable MemoryCache() configuration,
Set dependance injection by using AddSingleton<>
Configure connection string.

Configure :-
Used to configure middlewares, services, and other essential app-level configurations like routing, authentication, cors etc. 
In newer versions of ASP.NET Core (6 and above), the Startup.cs file is often replaced by configuration inside Program.cs.
--------------------------------------------------------------
#Program.cs
This file is the entry point for the application. It sets up the web server and starts the app.
In newer versions of ASP.NET Core, this file is responsible for configuring and launching the app, which used to be handled by Startup.cs in older versions.
--------------------------------------------------------------
#LunchSetting.json:-
-This file is mainly used for storing configuration related to how the application is launched during development. It is generally found in the Properties folder of a project.
-Environment Variables: You can define environment variables that are used when running the application.
-Application URL: You can set the URL (e.g., http://localhost:5000) where the app will run.
--------------------------------------------------------------
#Appsetting.json:
this file is used for storing application level setting like database connections, logging settings, API keys, SMTP setting etc.
--------------------------------------------------------------

#Razor : razor is one of the view engines supported in ASP.NET MVC. razor allows you to write a mix of HTML and server-side code using C#.

#ADO.NET: The .Net framwork includes its own data access technology, ADO.NET. ADO.NET Consists of Managed classes that allow .Net application to connect to Data sources, execute commands, and manage disconnected data.

#RestCaller : there is one type of middleware how get requast parameters and create request object and send request to another server which is proxyServer it means it By using one API we call Another api

#Thread vs Process : 
Process: A process is a program in execution.
if we want to run code parallely then we use threads.

Thread: thread is separate path of execution in program.
- process are heavy weight, thread are lightweight,
- Contest switching from one Process to another is expensive.
- Interprocess communication is expensive. in thread less expensive.
 
#authentication and authorization.
Authentication : is the mechanism to identify whether user can access the application or not 
Authorization : After authentication it check the authenticated use has the requird permissions to access a perticular resource.

#Async and Await
Async and await are keywords in C# that enable asynchronous programming, allowing your code to run concurrently and improve responsiveness. 
-An async method is a method that returns a Task
-The await keyword is used to suspend the execution of an async method until the awaited task completes.
Key Concepts:
  Task: Represents an asynchronous operation that may complete in the future.
  await Task.WhenAll() is a method in C# that allows you to wait for multiple asynchronous tasks to complete simultaneously.

#AddSingleton<>();
Meaning of services.AddSingleton<IOrder, Order>();
Registration: This line of code registers Order as an implementation of the IOrder interface with the DI container as a singleton.
-------------------------------------------------------------------------
Service lifetimes 
-AddSingleton:- create only one instance when the service is requested for first time. and then the same instance will be shared by all different http requests.
-AddScoped:- create single instance for each request. for a different http request there will be a different instance.
-AddTransient:- this instance is not shared at all. every time a new instance will be created.

****************************************************Key Features of the ABP Framework**********************************************

ABP is a open source web application framework to create mobile and web application based on asp .net core it provide infrastructure for interprice level software
Command for create solution-
	     abp new <YourProjectName>
	
Modularity: ABP allows you to build applications in a modular way, making it easier to manage dependencies and share functionality across different parts of the application.

User and Role Management: It includes a comprehensive user and role management system, simplifying authentication and authorization.

Localization and Globalization: The framework supports multiple languages and cultures, making it easier to create applications that can cater to a global audience.

API Development: ABP simplifies the creation of RESTful APIs, making it easier to expose application functionality to front-end applications or third-party services.

UI Frameworks: ABP integrates well with various front-end frameworks, such as Angular and React, allowing for modern web application development.

Dependency Injection: It uses built-in dependency injection, promoting a loosely coupled design.
					
**************************************************Dependence injection ************************************************************

it is A design pattern to reduce coupling between classes
- Instad of dependant object manage their dependancy .net framwork will automatically create object and make it available to Dependant object directly at runtime.
- This will lead to loose cupling approach.
- Since dependant object no longer manageing the dependancy this approch is called as IOC.
--------------------------------------------------------------------------------------------------------------------------------
#Types of Injection:

Constructor Injection: Dependencies are provided through the class constructor. This is the most common type of dependency injection.
Property Injection: Dependencies are provided through public properties of the class.
Method Injection: Dependencies are provided through public methods of the class.

# Benefits of Dependency Injection:

Decoupling: Classes become less dependent on specific implementations of other classes or services, promoting loose coupling.

Testing: Dependencies can be easily mocked or substituted during testing, allowing for easier unit testing and isolation of components.

Flexibility: Different implementations of dependencies can be easily swapped at runtime, without requiring changes to the dependent class.

****************************************SOLID Principle***********************************************************************

The SOLID principles are a set of five principles in object-oriented programming to make software designs more understandable,
flexible, and maintainable. Each letter in "SOLID" stands for a different principle:

1) Single Responsibility Principle (SRP):

A class should have only one reason to change, meaning that it should have only one job or responsibility. 
This principle helps in keeping classes focused and easier to maintain.

2) Open for extension Closed for modification Principle (OCP):

Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. 
This means that you should be able to extend the behavior of a module without altering its source code.

3) Liskov Substitution Principle (LSP):

Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program. 
This principle ensures that inheritance is used correctly.

4) Interface Segregation Principle (ISP):

This principle advocates for the creation of specific, smaller interfaces instead of one large interface, 
which helps in keeping dependencies minimal and specific to the client's needs.

5) Dependency Inversion Principle (DIP):

High-level modules/classes should not depend on low-level modules/classes. Both should depend on abstractions (e.g., interfaces). 
Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions. 
This principle promotes loose coupling between software modules, making the system more maintainable and allowing for easier substitution of components.
*********************************************************Agile methodology****************************************************
Agile methodology is an iterative approach to project management and software development that emphasizes flexibility, collaboration, and customer feedback.
Here are some key concepts:
-Iterative Development: Projects are broken down into small, manageable sprints, typically lasting 1-4 weeks. Each iteration results in a working product increment.
-Collaboration: Agile promotes strong communication among team members and stakeholders. Daily stand-up meetings help keep everyone aligned and address any blockers.
-Customer Involvement: Continuous customer feedback is integral. Stakeholders review each increment to ensure the product meets their needs and can suggest changes.
-Adaptive Planning: Plans can evolve based on feedback and changing requirements. This allows teams to be more responsive to new information.
-Cross-Functional Teams: Agile teams are typically composed of members with various skills, enabling them to take ownership of different aspects of the project.
-Focus on Deliverables: The aim is to deliver a usable product quickly, allowing teams to gather feedback sooner rather than later.

****************************************************************Docker********************************************************

Window application always Run on IIS(Internet information services)
Internet Information Services is an extensible web server software for the Windows server, created by Microsoft to be used with the Windows NT family. It supports HTTPS, HTTP, HTTP/2, FTPS, FTP, NNTP, and SMTP.

IIS Express : lightweight web server Provided by Visual Studio Similar to IIS

IIS Express is a service Provided by visual Studio another services like 
Visual Studio support Apache, TomCat, Wamp,Xamp, MySQL, Java, Php this are services 

----------------------------------------------------------Docker---------------------------------------------------------------------

Docker is a platform used to develop, ship, and run applications inside containers. 

Containers are a lightweight form of virtualization that allows applications to be packaged with their dependencies and configurations, 
ensuring they run consistently across different environments.

1. Containers
Definition: Containers are a standardized unit of software that encapsulates everything needed to run an application, 
			including code, runtime, libraries, and system tools. its a Running instance of Image.
		
Characteristics: Containers are isolated from each other and from the host system, meaning they don't interfere with each other’s operations. 
				 They share the same OS kernel but run in their own user space.
					- allow Runnuning multiple apps in isolation
					- are lightweight
					- start quickly
					- are Running instance of Image ( project_image >--RUN--> Container )
					- The Container is a process that run applications with images
					- Container is an isolated process
					
				
2. Images
Definition: An image is a read-only template used to create containers. It contains the application code, libraries, and dependencies needed for the app to run.

Docker Images Made Based on Linux Containers
			
Creation: Images are built from a Dockerfile, which contains instructions on how to assemble the image.
			For example, it specifies the base image (like an OS or a runtime), how to install software, and how to configure the application.
			-Images are Templates of Project
			- it is a kind of ready to use software read-only Template
			- Image is made with source code, libraries, External Dependancies, & tools(CMD)
			- Image Cannot be updated (Can update code changes on imgae)
			- If you want to make changes in image you have to create new image
			
3. Dockerfile
Definition: A Dockerfile is a text file with a series of instructions on how to build a Docker image.

Instructions: Common instructions include FROM (specifying the base image), RUN (executing commands), COPY (copying files), and CMD (specifying the default command to run

4. Docker Engine
Definition: The Docker Engine is the runtime that builds and runs containers. It consists of a server (a long-running daemon process), a REST API for interacting with the server, and a command-line interface (CLI) for managing Docker.

5. Docker Hub
Definition: Docker Hub is a cloud-based registry service where Docker images are stored and shared. 
			It allows you to upload your own images and download images created by others.
			
6. Docker Compose
Definition: Docker Compose is a tool used to define and run multi-container Docker applications. 
			It uses a YAML file (docker-compose.yml) to configure the application’s services, networks, and volumes.

How Docker Works:
Build: You write a Dockerfile and use Docker to build an image from it.
Run: You use the Docker CLI or API to run a container from the image.
Manage: Docker provides commands to manage and orchestrate containers, networks, and volumes.

Benefits of Docker:
Portability: Containers can run on any machine that has Docker installed, regardless of the underlying OS.
Consistency: Docker ensures that the application behaves the same in development, testing, and production environments.
Efficiency: Containers are lightweight and have lower overhead compared to traditional virtual machines.

In summary, Docker simplifies the development and deployment process by allowing you to package applications and their dependencies into containers that can run uniformly across various environments.




Docker Images are made based on Linux Container
https://www.youtube.com/watch?v=5D6FxfrP0KA&list=PL8p2I9GklV47v6WZTjHAqdsHxpTIpjRwn&index=11

- Docker is virsion control tool

* Parent Image => Node, mogoDB, Php(Official Images)

* Dockerhub and Docker Desktop are same it provides us ParentImages (Download, pull, manage)

--Steps to Create Docker Image and Run on Docker Desktop--
Rigth Click on Project -> Docker Support (It will Create Docker File)
Rigth Click on Project -> Container Orchestrator Support (It wil Create Docker Compose File) -- Container

other...in Notebook
********************************************************************************************************************************************
# Key Features of Kanban in Jira
Visual Boards: Kanban uses a board layout where tasks are represented as cards. Columns represent different stages of the workflow (e.g., To Do, In Progress, Done).	
Continuous Delivery: Unlike traditional methods with fixed-length sprints, Kanban promotes continuous delivery. Teams can prioritize and complete tasks as they are ready.	
	
**********************************************************************DB**********************************************************************
SQL VS SQL server : SQL is Query languge, while SQL Server is a DataBase managment System.
					SQL is Query languge for working with a relational DB while SQL server is software that perform SQL query.

DataBase: A Db is a structured collection of Data that is organized and Stored in a way that allows for efficient retrival, manipulation 

--------------------------------------------------SQL Command/ Type of DB languge--------------------------------------------------
DB languge are used to read, update, and Store Data in DB. There are several languges can be used for this porpose
1. Data defination languge(DDL) : Used to define DB Schema 
								  Ex. Create,Drop,Truncate, Alter
2. Data Manupulation languge(DML) : Used to Manupulat Data for ex. Insert,update, Delete, Select
3. Data Control languge(DCl) : DCl mainly Dels with rigths and permissions and other Controls Ex. Grant and revoke.
4. Transaction Control languge(TCL): TCL Dels with transaction within DB, EX. Commit,Rollback, Savepoint

----------------------------------------------------------ACID Property------------------------------------------------------------

ACID is stands for Atomicity, Consistency, Isolation and Durability
Atomicity:- Every Transaction Should be execute as a single unit means all the step should happen or none should happen there is no partial execution.
Consistency:- Onec the transaction is executed It should move from one Consistent state to another.
Isolation:- Transaction Should be Executed in isolation from other transaction. 
			Ex. when a transaction is happing then the changes are visible to only person who performing the tradition till it getting executed				
				The Changes will be visible to all user when transaction is Completed
Durability:- After succesfully complete the trasaction changes in the DB is persist				

--------------------------------------------------Store Procedure VS function -------------------------------------------------------
1. SP Can return 0, single or multiple value, function Can return single value Which is Mandatoy.
2. SP Can have Input and Output parameter , function have only Input parameter.
3. We can Call Function from SP, But not fuction call SP.
4. we cant use SP in select, where or Having statment, but function use.

#Type of Functions
1.Single Row Function : sqrt(10),abs(10),round(12.34), Ceil(234.2), floor(2.133)
2. Aggregate Function : sum, min, max,count,avg.



-----------------------------------------------------Joins, View, Trigger------------------------------------------------------------------------
#Inner Join : inner Join return only the row from both table where they are match based on join condition.
#Outer join : Outer Join return all row from one table and matching row from other table Based on join condition.
#Left Join : return All Row from left table and matching row from rigth table.

#View: 	View in SQL are Consider as a virtual table. A view also Contain rows and Columns It is used to give Limited access to the table to hide Complex Query
		It Provide Security for hiding Table Name.
		- it simplified Querying
		- Data security
		- Code
#Trigger: trigger are spacial procedure which gets executed automatically when user performs some action this is used for maintian the logs
- Trigger timing = After : It will Execute use Action First then Execute Trigger 
				   Before: it will Execute Trigger First then Action
		
- Query : Create trigger triggerName before insert on tableName for each row
			begin
				insert into tableLogs values(...);
			end;
				   
-------------------------------------------------------------Normalization----------------------------------------------------------------------
- Normalization is a process of Organizing the Data in Database to avoid data redundancy, insertion,updation,deletion anomly
- Normalization Divide larger table into the smaller table and links Them using relationship
#1st NF : The relation will be 1NF if it contain an atomic Value. means table Cannot hold multiple value.
			Ex. EmpName | PhoneNo <- phoneNo Cannot be Multiple
#2nd NF : a relation must be in 1stNF and relation should not any partial dependency.
			Ex. TecherId | TecherAge | Subject => TecherId | TecherAge & TecherId | Subject

#3rd NF : The relation will be in 3NF if is in 2NF and not contain any transitive partial dependency   
			EX. EMPID | Name | ZIP | STATE | CITY =>  EMPID | Name | ZIP  &  ZIP | STATE | CITY 

*******************************************************DevOps, AWS, Git*****************************************************************
#DevOps:
	- Devops is a methodology in software development, it Industries used to set of practices and tools to improve Collabration and communication between software Software Development and It Opration team.
	- The Primary Goal of Devops is to shorten the software lifecycle, Enables continus delivery of High Quality software.
	- Overall Devops aims to bridge gap between Developer and Operations. And promote collabration and Accelerate Software Delivery.

#AWS:
	- it is a cloud computing platform provided by amezon where we can Quickly and securly host our application.
	- AWS Offer services such as Virtual server, storage, networking, databases, security will help organization to scale and grow.
	- Some of AWS services like EC2 (elastic Compute cloud) for Scalable virtual Server and allow user to run application.
	- Amezon S3 (Simple storage service) it provide scalable Storage for various type of data including Files,  Documents, image 
	- S3 is mainly Designed for storage and retriving data.

#Waterfall Model: 
	- it is sequencial software development process that follow step by step approach.
	- it consist of Phases Such as requirment gathering, Design,codeing,testing, development and maintanance.
	- In that each phase must complete before moving to the next step
	- Used in small projects.

#Git: 
	- Git is a Version control System is a tool that help to track changes in code.
#Git hub:
	- is a website that allows developers to store and manage their code using git. 	
	
	
**********************************************************REACT***********************************************************************
#What is React
react is open-source front-end javascript library this is used for building user interface. it is used for handling view layer for web and mobile apps.

#What are the major feature of react
1. It uses Virtual Dom instade of real DOM 
2. Follw unidirectional Data flow (parent send data to child only)
3. it uses reusable UI Componants to develop The View.

#DOM(Document Object Model)
- it's a structural representation of HTML in webpage or Application, It represent entire UI of the web application as a tree data structure.

#Virtual DOM 
- For every DOM Object, There is a Corresponding Virtual DOM object(Copy), Which has the Same properties.
-The Different between the real dom and virtual dom is that any changes in the virtual Dom object will not reflect on the screen directly, Consider
	a virtual dom is blueprint of real dom object whenever a JSX element is rendered every virtual dom object is updated,
- react uses two virtual dom to render the user interface one of then is used to store the current state of the object and other to store previous state of the objects,
	whenever the virtual dom gets updated, react compare the two virtual dom and gets to know about which virtual object updated. and react render only those object inside real dom instaed of reandering complete real dom.
	
#LifeCycle methos in react
Every Componant in react has lifecycle methods Each componant in react goes through Mounting, updating, and unmounting phases.

#PROPS and STATE
props: props are readonly Immutable Which are used for parent child communication.
state: Every componant is react has a build in state object. which contains all the values that belong to that componant, state can be change by using setstate method in class.

#Hooks
Hooks is a special fuction that let you use state and other feature without writing class Ex usestate hook lets us define state for a component.
Hooks is a special function by using that we can set state of the components.ex usestate.

#AJAX(Asynchronous Javascript and xml)
It is a technique used in web application when we want to change the portion of the page without reloading the entire page.

#Axios
it used to connect fronted to backend , axios provide simple API for making HTTP request with method like axios.get,axios.post,axios.put... for Different HTTP methods.

#What is JSX
it stands for javascript xml, jsx is a XML-like syntax it allow us to write HTML inside Javascript.

#Functional Componants
-fuctional component are nothing but javascript functions and it can be Declare using arrow function or fuction keyword.
-Before introduction hooks in react fuctional components were called as statless components after introduction of hook Functional components are equivalent to class component.

-Fuctional componant use react hook to handle state it uses the usestate hook to set state of a variable inside the component.


13. How can you differentiate ASP.NET Core from .NET Core?
.NET Core is a runtime and is used for the execution of an application that is built for it. 
Whereas ASP.NET Core is a collection of libraries that will form a framework for developing web applications. 
ASP.NET Core libraries can be used on .NET Core as well as on the “Full .NET Framework”.





REST
#REST API:
interface
abstract Class: 
Casting
Constructor
Type of Inheritance
Cookies
Session
OOPs Concepts Abstract,Encapsulation
Association
Exceptions
SynchronizationWhy interface can not have The constructor?
Why Abstract Class have a Constructor?
MVC flow:
Common languge Runtime(CLR)
 intermediate languge(IL)
 Common languge specification(CLS)
 Common Type System(CTS)
 #Diff between .NET Framework and .NET Core 
 Delegates
 Func
 LINQ
 Marker Interface 
 Functional Interface
 Rrflection
 Thread vs Process
 authentication and authorization.
 Async and Await
 ABP
 Dependence injection 
 Types of Injection:
 SOLID Principle
 Agile methodology
 Docker
 JWT
  SQL VS SQL server 
  Key Features of Kanban in Jira
  SQL Command/ Type of DB languge
  ACID Property
  Store Procedure VS function
  Joins, View, Trigger
  Normalization
  DevOps, AWS, Git